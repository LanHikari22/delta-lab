!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADC_CLK_10	DE10_LITE_Golden_Top.v	/^	input 		          		ADC_CLK_10,$/;"	p
ADDRW	busmux_t.vhd	/^	constant ADDRW: integer := 3;$/;"	c
ADDRW	regfile.vhd	/^	constant ADDRW: integer := 4;$/;"	c
ARDUINO_IO	DE10_LITE_Golden_Top.v	/^	inout 		    [15:0]		ARDUINO_IO,$/;"	p
D	dlatch1911.vhd	/^	type test_vector is record$/;"	r
DATAW	busmux_t.vhd	/^	constant DATAW: integer := 4;$/;"	c
DATAW	regfile.vhd	/^	constant DATAW: integer := 4;$/;"	c
DE10_LITE_Golden_Top	DE10_LITE_Golden_Top.v	/^module DE10_LITE_Golden_Top($/;"	m
DRAM_ADDR	DE10_LITE_Golden_Top.v	/^	output		    [12:0]		DRAM_ADDR,$/;"	p
DRAM_CAS_N	DE10_LITE_Golden_Top.v	/^	output		          		DRAM_CAS_N,$/;"	p
DRAM_CLK	DE10_LITE_Golden_Top.v	/^	output		          		DRAM_CLK,$/;"	p
DRAM_DQ	DE10_LITE_Golden_Top.v	/^	inout 		    [15:0]		DRAM_DQ,$/;"	p
DRAM_RAS_N	DE10_LITE_Golden_Top.v	/^	output		          		DRAM_RAS_N,$/;"	p
DRAM_WE_N	DE10_LITE_Golden_Top.v	/^	output		          		DRAM_WE_N,$/;"	p
ENABLE_ACCELEROMETER	DE10_LITE_Golden_Top.v	/^`define ENABLE_ACCELEROMETER$/;"	c
ENABLE_ADC_CLOCK	DE10_LITE_Golden_Top.v	/^`define ENABLE_ADC_CLOCK$/;"	c
ENABLE_ARDUINO	DE10_LITE_Golden_Top.v	/^`define ENABLE_ARDUINO$/;"	c
ENABLE_CLOCK1	DE10_LITE_Golden_Top.v	/^`define ENABLE_CLOCK1$/;"	c
ENABLE_CLOCK2	DE10_LITE_Golden_Top.v	/^`define ENABLE_CLOCK2$/;"	c
ENABLE_GPIO	DE10_LITE_Golden_Top.v	/^`define ENABLE_GPIO$/;"	c
ENABLE_HEX0	DE10_LITE_Golden_Top.v	/^`define ENABLE_HEX0$/;"	c
ENABLE_HEX1	DE10_LITE_Golden_Top.v	/^`define ENABLE_HEX1$/;"	c
ENABLE_HEX2	DE10_LITE_Golden_Top.v	/^`define ENABLE_HEX2$/;"	c
ENABLE_HEX3	DE10_LITE_Golden_Top.v	/^`define ENABLE_HEX3$/;"	c
ENABLE_HEX4	DE10_LITE_Golden_Top.v	/^`define ENABLE_HEX4$/;"	c
ENABLE_HEX5	DE10_LITE_Golden_Top.v	/^`define ENABLE_HEX5$/;"	c
ENABLE_KEY	DE10_LITE_Golden_Top.v	/^`define ENABLE_KEY$/;"	c
ENABLE_LED	DE10_LITE_Golden_Top.v	/^`define ENABLE_LED$/;"	c
ENABLE_SDRAM	DE10_LITE_Golden_Top.v	/^`define ENABLE_SDRAM$/;"	c
ENABLE_SW	DE10_LITE_Golden_Top.v	/^`define ENABLE_SW$/;"	c
ENABLE_VGA	DE10_LITE_Golden_Top.v	/^`define ENABLE_VGA$/;"	c
FCLK_IN	clock_div.vhd	/^	constant FCLK_IN: integer := 50E6;$/;"	c
FREQ	busmux_t.vhd	/^	constant FREQ: integer := 1E9;$/;"	c
FREQ	decoder.vhd	/^	constant FREQ: integer := 1E9;$/;"	c
FREQ	reg.vhd	/^	constant FREQ: integer := 1E9;$/;"	c
FREQ	regfile.vhd	/^	constant FREQ: integer := 1E9;$/;"	c
FREQ	updown_counter.vhd	/^	constant FREQ: integer := 1E9;$/;"	c
GPIO	DE10_LITE_Golden_Top.v	/^	inout 		    [35:0]		GPIO$/;"	p
GSENSOR_CS_N	DE10_LITE_Golden_Top.v	/^	output		          		GSENSOR_CS_N,$/;"	p
GSENSOR_SCLK	DE10_LITE_Golden_Top.v	/^	output		          		GSENSOR_SCLK,$/;"	p
GSENSOR_SDO	DE10_LITE_Golden_Top.v	/^	inout 		          		GSENSOR_SDO,$/;"	p
HEX0	DE10_LITE_Golden_Top.v	/^	output		     [7:0]		HEX0,$/;"	p
HEX1	DE10_LITE_Golden_Top.v	/^	output		     [7:0]		HEX1,$/;"	p
HEX2	DE10_LITE_Golden_Top.v	/^	output		     [7:0]		HEX2,$/;"	p
HEX3	DE10_LITE_Golden_Top.v	/^	output		     [7:0]		HEX3,$/;"	p
HEX4	DE10_LITE_Golden_Top.v	/^	output		     [7:0]		HEX4,$/;"	p
HEX5	DE10_LITE_Golden_Top.v	/^	output		     [7:0]		HEX5,$/;"	p
KEY	DE10_LITE_Golden_Top.v	/^	input 		     [1:0]		KEY,$/;"	p
LEDR	DE10_LITE_Golden_Top.v	/^	output		     [9:0]		LEDR,$/;"	p
MAX10_CLK1_50	DE10_LITE_Golden_Top.v	/^	input 		          		MAX10_CLK1_50,$/;"	p
MAX10_CLK2_50	DE10_LITE_Golden_Top.v	/^	input 		          		MAX10_CLK2_50,$/;"	p
PERIOD_CNT	clock_div.vhd	/^	constant PERIOD_CNT: integer := FCLK_IN \/ FCLK_OUT;$/;"	c
S	sr_latch.vhd	/^	type test_vector is record$/;"	r
SELW	decoder.vhd	/^	constant SELW: integer := 3;$/;"	c
SW	DE10_LITE_Golden_Top.v	/^	input 		     [9:0]		SW,$/;"	p
T	busmux_t.vhd	/^	constant T: time := 1 sec \/ FREQ; -- wait period of simulation$/;"	c
T	clock_div.vhd	/^	constant T: time := 1 sec \/ FCLK_IN;$/;"	c
T	decoder.vhd	/^	constant T: time := 1 sec \/ FREQ; -- simulation time unit$/;"	c
T	reg.vhd	/^	constant T: time := 1 sec \/ FREQ;$/;"	c
T	regfile.vhd	/^	constant T: time := 1 sec \/ FREQ;$/;"	c
T	updown_counter.vhd	/^	constant T: time := 1 sec \/ FREQ;$/;"	c
VGA_B	DE10_LITE_Golden_Top.v	/^	output		     [3:0]		VGA_B,$/;"	p
VGA_HS	DE10_LITE_Golden_Top.v	/^	output		          		VGA_HS,$/;"	p
VGA_VS	DE10_LITE_Golden_Top.v	/^	output		          		VGA_VS,$/;"	p
W	reg.vhd	/^	constant W: integer := 4;$/;"	c
W	updown_counter.vhd	/^	constant W: integer := 4;$/;"	c
`endif	DE10_LITE_Golden_Top.v	/^`endif$/;"	p
assert_eq	testbench_utils.vhd	/^	procedure assert_eq(exp: std_logic; act: std_logic; msg: String) is$/;"	p
assert_eq	testbench_utils.vhd	/^	procedure assert_eq(exp: unsigned; act: unsigned; msg: String) is$/;"	p
bus_arr	custom_types.vhd	/^	type bus_arr is array (natural range <>) of std_logic_vector;$/;"	t
busmux_t	busmux_t.vhd	/^entity busmux_t is -- conflicts with megafunction library from Quartus Prime$/;"	e
busmux_t_tb	busmux_t.vhd	/^entity busmux_t_tb is end entity;$/;"	e
clk	dff1911.vhd	/^	type test_vector is record$/;"	r
clock_div	clock_div.vhd	/^entity clock_div is$/;"	e
clock_div_tb	clock_div.vhd	/^entity clock_div_tb is end entity;$/;"	e
custom_types	custom_types.vhd	/^package body custom_types is$/;"	P
custom_types	custom_types.vhd	/^package custom_types is$/;"	P
d	decoder.vhd	/^		sel: std_logic_vector(SELW-1 downto 0);$/;"	r
de10_lite_top	de10_lite_top.vhd	/^entity de10_lite_top is $/;"	e
de10_lite_top	de10_lite_top_template.vhd	/^entity de10_lite_top is $/;"	e
decoder	decoder.vhd	/^entity decoder is$/;"	e
decoder_tb	decoder.vhd	/^entity decoder_tb is end entity;$/;"	e
dff1911	dff1911.vhd	/^entity dff1911 is $/;"	e
dff1911_tb	dff1911.vhd	/^entity dff1911_tb is end entity;$/;"	e
disp_cur_test	sr_latch.vhd	/^	impure function disp_cur_test(i: integer) return String is$/;"	f
disp_cur_test	testbench_utils.vhd	/^	impure function disp_cur_test(i: integer) return String is$/;"	f
disp_not_eq	testbench_utils.vhd	/^	function disp_not_eq(exp: std_logic; act: std_logic) return String is$/;"	f
disp_not_eq	testbench_utils.vhd	/^	function disp_not_eq(exp: unsigned; act: unsigned) return String is$/;"	f
disp_not_equal	sr_latch.vhd	/^	function disp_not_equal(exp: std_logic; act: std_logic) return String is$/;"	f
dlatch1911	dlatch1911.vhd	/^entity dlatch1911 is$/;"	e
dlatch1911_tb	dlatch1911.vhd	/^entity dlatch1911_tb is end entity;$/;"	e
end_simulation_if_error	testbench_utils.vhd	/^	procedure end_simulation_if_error is$/;"	p
gen_clk	testbench_utils.vhd	/^	procedure gen_clk(signal clk: out std_logic; constant FREQ: integer; constant PHASE: time := 0 sec) is$/;"	p
inout	DE10_LITE_Golden_Top.v	/^	inout 		          		ARDUINO_RESET_N,$/;"	p
inout	DE10_LITE_Golden_Top.v	/^	inout 		          		GSENSOR_SDI,$/;"	p
input	DE10_LITE_Golden_Top.v	/^	input 		     [2:1]		GSENSOR_INT,$/;"	p
output	DE10_LITE_Golden_Top.v	/^	output		          		DRAM_CKE,$/;"	p
output	DE10_LITE_Golden_Top.v	/^	output		          		DRAM_CS_N,$/;"	p
output	DE10_LITE_Golden_Top.v	/^	output		          		DRAM_LDQM,$/;"	p
output	DE10_LITE_Golden_Top.v	/^	output		          		DRAM_UDQM,$/;"	p
output	DE10_LITE_Golden_Top.v	/^	output		     [1:0]		DRAM_BA,$/;"	p
output	DE10_LITE_Golden_Top.v	/^	output		     [3:0]		VGA_G,$/;"	p
output	DE10_LITE_Golden_Top.v	/^	output		     [3:0]		VGA_R,$/;"	p
reg	reg.vhd	/^entity reg is$/;"	e
reg_tb	reg.vhd	/^entity reg_tb is end entity;$/;"	e
regfile	regfile.vhd	/^entity regfile is$/;"	e
regfile_tb	regfile.vhd	/^entity regfile_tb is end entity;$/;"	e
report_error_and_inc_count	testbench_utils.vhd	/^	procedure report_error_and_inc_count(msg: String) is$/;"	p
report_tests_pass_status	testbench_utils.vhd	/^	procedure report_tests_pass_status is$/;"	p
seg7	seg7.vhd	/^entity seg7 is$/;"	e
sel	decoder.vhd	/^	type test_vector is record$/;"	r
sr	sr.vhd	/^ENTITY sr IS $/;"	e
sr_latch	sr_latch.vhd	/^entity sr_latch is$/;"	e
sr_latch_tb	sr_latch.vhd	/^entity sr_latch_tb is end entity;$/;"	e
td	decoder.vhd	/^	constant td: test_vector_arr := ($/;"	c
td	dff1911.vhd	/^	constant td: test_vector_arr := ($/;"	c
test_vector	decoder.vhd	/^	type test_vector is record$/;"	t
test_vector	dff1911.vhd	/^	type test_vector is record$/;"	t
test_vector	dlatch1911.vhd	/^	type test_vector is record$/;"	t
test_vector	sr_latch.vhd	/^	type test_vector is record$/;"	t
test_vector_arr	decoder.vhd	/^	type test_vector_arr is array (natural range <>) of test_vector;$/;"	t
test_vector_arr	dff1911.vhd	/^	type test_vector_arr is array (natural range <>) of test_vector;$/;"	t
test_vector_arr	dlatch1911.vhd	/^	type test_vector_arr is array (natural range <>) of test_vector;$/;"	t
test_vector_arr	sr_latch.vhd	/^	type test_vector_arr is array (natural range <>) of test_vector;$/;"	t
test_vectors	dlatch1911.vhd	/^	constant test_vectors: test_vector_arr := ($/;"	c
test_vectors	sr_latch.vhd	/^	constant test_vectors: test_vector_arr := ( -- needs at least two entries to compile$/;"	c
testbench_utils	testbench_utils.vhd	/^package body testbench_utils is$/;"	P
testbench_utils	testbench_utils.vhd	/^package testbench_utils is$/;"	P
updown_counter	updown_counter.vhd	/^entity updown_counter is$/;"	e
updown_counter_tb	updown_counter.vhd	/^entity updown_counter_tb is end entity;$/;"	e
